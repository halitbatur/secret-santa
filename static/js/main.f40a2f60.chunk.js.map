{"version":3,"sources":["components/SecretSanta.js","resources/santagif.gif","App.js","reportWebVitals.js","index.js"],"names":["SecretSanta","React","useState","secretSantas","setSecertSantas","email","name","formInput","setFormInput","Container","Row","style","width","margin","Form","Group","className","controlId","Control","type","placeholder","value","onChange","e","target","Text","Button","variant","onClick","preventDefault","handleButtonClick","display","justifyContent","flexWrap","alignItems","map","secretSanta","Badge","bg","prevState","filter","item","newSantas","santasCopy","i","length","randomIndex","Math","floor","random","randomSanta","push","splice","console","log","forEach","person","window","Email","send","Host","Username","Password","To","From","Subject","Body","then","alert","sendEmails","App","src","santaGif","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f40a2f60.chunk.js","sourcesContent":["import React from 'react';\nimport {Form,Button,Badge,Container,Row} from 'react-bootstrap';\n\nfunction SecretSanta() {\n    const [secretSantas,setSecertSantas] = React.useState([]);\n    const [formInput,setFormInput] = React.useState({\n        email:\"\",\n        name:\"\"\n    });\n\n    const handleButtonClick = (e) => {\n        e.preventDefault()\n        setSecertSantas([...secretSantas,formInput])\n        setFormInput({email:\"\",name:\"\"})\n    };\n\n    const sendEmails = () => {\n        let newSantas = []\n        const santasCopy = [...secretSantas];\n        for(let i = 0; i < secretSantas.length; i++){\n        const randomIndex = Math.floor((Math.random() * santasCopy.length))\n        const randomSanta = santasCopy[randomIndex];\n        if(randomSanta.email === secretSantas[i].email){\n            i--;\n            continue;\n        }\n            newSantas.push({email:secretSantas[i].email,secretSanta:randomSanta.name})\n            santasCopy.splice(randomIndex,1);\n        }\n        console.log(newSantas)\n        \n        newSantas.forEach(person => {\n        window.Email.send({\n        Host : \"smtp.elasticemail.com\",\n        Username : \"halitfuatbatur@gmail.com\",\n        Password : \"B661DB3F65D33FA31A24C73028A859FB9AC5\",\n        To : `${person.email}`,\n        From : \"halitfuatbatur@gmail.com\",\n        Subject : \"testest\",\n        Body : `you are ${person.secretSanta}'s secret Santa ENJOOY `\n        }).then(() => window.alert(\"sent\"))\n        })\n    }\n\n\n    \n    return (\n            <Container>\n                <Row style={{width:\"50%\",margin:\"auto\"}}>\n                    <Form>\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n                        <Form.Control type=\"email\" placeholder=\"Enter email\" value={formInput.email} onChange={(e) => setFormInput({...formInput,email:e.target.value})} />\n                        <Form.Text className=\"text-muted\">\n                        </Form.Text>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n                        <Form.Control type=\"text\" placeholder=\"Name\" value={formInput.name} onChange={(e) => setFormInput({...formInput,name:e.target.value})}/>\n                    </Form.Group>\n                    <Button variant=\"primary\" type=\"submit\" onClick={(e) => handleButtonClick(e)}>\n                        Add a secret Santa\n                    </Button>\n                    </Form>\n                </Row>\n                <Row className=\"mt-3\">\n                <h3>Total secret santas</h3>\n                <div style={{display:\"flex\",justifyContent:\"space-between\",flexWrap:\"wrap\",alignItems:\"center\"}}>\n                {secretSantas.map(secretSanta => {\n                    return ( \n                    <div key={secretSanta.name}>\n                        <p>\n                            {secretSanta.email} <Badge bg=\"secondary\">{secretSanta.name}</Badge> <Button variant=\"danger\" onClick={() => setSecertSantas(prevState => {\n                                const copy = prevState.filter(item => item.name !== secretSanta.name);\n                                return copy\n                            }) }>delete</Button>\n                        </p>\n                    </div>\n                    )\n                })}\n            </div>\n                 \n                </Row>\n                <Button onClick={() => {sendEmails()}}>SEND EMAILS</Button>\n            </Container>\n    )\n}\n\nexport default SecretSanta\n","export default __webpack_public_path__ + \"static/media/santagif.ea5fe05a.gif\";","import './App.css';\nimport SecretSantaList from './components/SecretSanta';\nimport santaGif from \"./resources/santagif.gif\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <img src={santaGif} alt=\"Logo\" />\n        <SecretSantaList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}